#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. "about/" for the file
#   "content/about.html"). To select all children, grandchildren, … of an
#   item, use the pattern "about/*/"; "about/*" will also select the parent,
#   because "*" matches zero or more characters.

require 'cgi'
require 'uri'
require 'curb'
require 'json'

class Nanoc::Filter
  class ResponsiveImages < Nanoc::Filter
    identifier :responsive_images
    def run(content, _params = {})
      @string = content.dup

      @pending = ''
      @output = ''

      until @string.empty?
        # looking for        <img src="/images/balken.png" alt="Bild der Balkengrafik" />
        match = scan_until(%r{<img src="([^"]*)"([^>]*)/>})

        break unless match

        file, rest = match.captures
        # puts "found a proper image #{file}"
        # @output << match[0]

        @output << match.pre_match

        @output << %(<img src="#{file}" )
        @output << srcset(file)
        @output << rest
        @output << '>'
      end # until @string.empty?

      @output << @string
      @output << ''

      @output
    end

    def srcset(file)
      pattern = 'content' + file.gsub('.', '*.')
      files = Dir.glob(pattern)
      set = files.map do |filename|
        if match = filename.match(/@(\d)x/)
          "#{filename.gsub('content', '')} #{match[1]}x"
        else
          "#{filename.gsub('content', '')} 1x"
        end
      end

      return '' if set.length < 2

      # puts "        srcset for #{file}: #{set.length} versions"
      %(srcset="#{set.join ', '}" )
    end

    def scan_until(regex)
      match = @string.match(regex)
      return unless match

      @string = match.post_match
      match
    end
  end

  class Peek < Nanoc::Filter
    identifier :peek
    def run(content, _params = {})
      puts "#{content.length} bytes of content."
      content
    end
  end

  class NoSlides < Nanoc::Filter
    identifier :noslides
    def run(content, _params = {})
      @output = content.dup.gsub(/^.*§.*$/, '')
      @output
    end
  end

  class SlideBreaks < Nanoc::Filter
    identifier :slide_breaks
    def run(content, _params = {})
      @string = content.dup

      @pending = ''
      @output = %(<div id="slide-1" title="Folie Nr. 1"></div>)
      i = 2

      until @string.empty?
        match = scan_until(/^(<h[123].*?>|<hr>+|^(<p>)*§(<.p>)*)$/m)

        break unless match

        @output << match.pre_match

        @output << %(\n<a class="slide_break" id="slide-#{i}" href="slide.html#slide-#{i}"  title="Wechsle zur Präsentations-Ansicht, Folie Nr. #{i}">▻</a>\n\n)
        i += 1
        if match[0] =~ /§/
          # discard match
        else
          @output << match[0]
        end
      end # untile @string.empty?

      @output << @string
      @output << ''

      @output
    end

    def scan_until(regex)
      match = @string.match(regex)
      return unless match

      @string = match.post_match
      match
    end
  end

  class Slides < Nanoc::Filter
    identifier :slides
    def run(content, _params = {})
      @string = content.dup

      @output = %(<div class="slide">)
      @pending = ''

      until @string.empty?
        match = scan_until(/^(<h[123].*?>|<hr>+|^(<p>)*§(<.p>)*)$/m)

        break unless match

        @output << match.pre_match

        @output << %(</div>\n<div class="slide">\n\n)
        if match[0] =~ /§/
          # puts "ignore #{match[0]}"
          # discard match
        else
          @output << match[0]
        end
      end

      @output << @string
      @output << '</div>'

      @output
    end

    def scan_until(regex)
      match = @string.match(regex)
      return unless match

      @string = match.post_match
      match
    end
  end

  class PatternTester < Nanoc::Filter
    identifier :pattern_tester

    def run(content, _params = {})
      @string = content.dup

      @output = ''
      @pending = ''

      until @string.empty?
        match = scan_until(/(<patterntester(?: name="(.*?)")?(?: pattern="(.*?)")?>|\z)/m)

        @pending << match.pre_match
        flush
        replace_with_link match[2], match[3]
      end
      flush

      @output
    end

    def scan_until(regex)
      match = @string.match(regex)
      return unless match

      @string = match.post_match
      match
    end

    def u_esc(s)
      CGI.escape(s).gsub(/\+/, '%2B').gsub(/\[/, '%5B').gsub(/\]/, '%5D')
    end

    def replace_with_link(name, pattern)
      match = scan_until %r{</patterntester>}
      return unless match and match.pre_match

      data = match.pre_match
      data_params = data.split(/\n/).map { |d| "list[]=#{d}" }.join('&')
      out = "<a href='/images/match.html?pattern=#{u_esc(pattern)}&listname=#{u_esc name}&#{u_esc data_params}'>RegEx Tester: /#{CGI.escapeHTML(pattern).gsub(
        /\|/, '&#124;'
      )}/</a>"
      @output << out
    end

    def flush
      @output << @pending
      @pending = ''
    end
  end

  # Handle Display of Source Code
  class CodeBlocks < Nanoc::Filter
    identifier :code_blocks
    LANGUAGES = { 'ruby' => 'ruby', 'sql' => 'sql', 'javascript' => 'javascript',
                  'typescript' => 'typescript', 'php' => 'php', 'csharp' => 'csharp',
                  'css' => 'css', 'plain' => 'plain', 'erb' => 'ruby; html-script: true',
                  'htmlcode' => 'html',
                  'markup' => 'xml', 'xml' => 'xml', 'shell' => 'shell', 'yaml' => 'yaml',
                  'dtd' => 'html', 'apache' => 'ruby' }.freeze

    def run(content, _params = {})
      @string = content.dup

      @output = ''
      @pending = ''

      languages = LANGUAGES.keys.join('|')

      until @string.empty?
        # match = scan_until /(\+(\S.+?\S?)\+|<(#{languages})(?: filename=["']([^"']*)["'])?(?: caption=["']([^"']*)["'])?>|\z)/m
        match = scan_until(/(<(#{languages})(?: filename=["']([^"']*)["'])?(?: caption=["']([^"']*)["'])?>|\z)/m)

        @pending << match.pre_match

        if match[1] # whole <language> tag
          # puts "found language #{match[2]}" if match[2] == 'javascript'
          flush
          generate_brushes match[2], LANGUAGES[match[2]], match[3], match[4]
        else
          flush
          generate_brushes 'htmlcode', LANGUAGES['htmlcode'], match[3], match[4]
        end
      end

      flush

      @output
    end

    def scan_until(regex)
      match = @string.match(regex)
      return unless match

      @string = match.post_match
      match
    end

    def generate_brushes(tag, replace, filename, caption)
      match = scan_until %r{</#{tag}>}
      return unless match and match.pre_match

      code = match.pre_match
      code = code.gsub(/^\n*/, '')
      if code.match(%r{</javascript>})
        puts 'this is an ERROR!'
      elsif match = code.match(/^__\|__$/)
        code1 = match.pre_match
        code2 = match.post_match
        @output << %(<div class="example twopane">\n)
        @output << %(<div class="filename">#{filename}</div>\n) if filename
        @output << %(<h4 class="caption">#{replace.capitalize} Code <small>#{caption}</small></h4>\n) if caption
        @output << %(<pre><code class="language-#{replace} linenums left">)
        @output << CGI.escapeHTML(code1) << %(</code></pre>)
        @output << %(<pre><code class="language-#{replace} linenums right">)
        @output << CGI.escapeHTML(code2) << %(</code></pre>)
        @output << %(<div class="clearfix"></div></div>\n)
      else
        @output << %(<div class="example">\n)
        @output << %(<div class="filename">#{filename}</div>\n) if filename
        @output << %(<h4 class="caption">#{replace.capitalize} Code <small>#{caption}</small></h4>\n) if caption
        @output << %(<pre><code class="language-#{replace}  linenums">)
        @output << CGI.escapeHTML(code) << %(</code></pre>)
        @output << %(</div>\n)
      end
    end

    def flush
      @output << @pending
      @pending = ''
    end
  end
end

preprocess do
  config[:nanoc_version_info] = Nanoc::Core.version_information.strip
  config[:nanoc_version_info_major_minor_patch] = Nanoc::Core.version_information.strip.scan(/\d+/).take(3).join('.')
  config[:nanoc_version_info_major_minor] = Nanoc::Core.version_information.strip.scan(/\d+/).take(2).join('.')
  config[:nanoc_version_info_major] = Nanoc::Core.version_information.strip.scan(/\d+/).first

  config[:gem_version_info]   = Gem::VERSION
  config[:ruby_version_info]  = `ruby --version`.strip

  @chapterOrder = [
    'das-web-und-html',
    'css',
    'css-layout',
    'urls',
    'formulare',
    'javascript-dom',
    'jquery',
    '---',
    'kommandozeile',
    'git',
    'http',
    'php-vorbereitung',
    'php',
    'php-db-lesen',
    'session',
    'php-db-schreiben',
    'php-db-optimierung',
    '---',
    'grafik',
    'javascript',
    'applied-js-and-css',
    'js-http',
    'json',
    'xml',
    '---',
    'security',
    'wordpress',
    'apache',
    'advanced-javascript',
    'mobile',
    'qualitaet'
  ]

  @chapters = {}

  @github_users = {
    'bjelline' => nil
  }

  @items.each do |item|
    item[:chapter] = item[:filename].split('/')[1]
    item[:chapter_title] = item[:chapter].gsub(/-/, ' ').gsub(/Qualitaet/, 'Qualität') # .upcase
    item[:github] = 'bjelline'
  end

  @github_users.each do |username, _wat|
    # request = Curl::Easy.http_get("https://api.github.com/users/"+username)
    # request.perform
    @github_users[username] = {} # JSON.parse(request.body_str)
  end

  @groupedItems = @items.group_by { |item| item[:chapter] }

  @orderedItems = []

  last_folder = 0
  @chapterOrder.each do |folder|
    if folder == '---'
      @chapters[last_folder][ :separator ] = true
    else
      @groupedItems[folder]
      @chapters[folder] = {}
      unless @groupedItems[folder].nil?
        @chapters[folder][ :items ] = @groupedItems[folder].sort_by { |i| i.attributes[:order] || 0 }
        @orderedItems += @chapters[folder][:items]
      end
      @chapters[folder][ :title ] = folder.gsub(/-/, ' ').gsub(/Qualitaet/, 'Qualität').split(' ').map do |w|
        w.capitalize
      end.join(' ')
      @chapters[folder][ :folder ] = folder
      @chapters[last_folder][ :separator ] = false if last_folder != 0 and @chapters[last_folder]
    end
    last_folder = folder
  end

  @items.each do |item|
    i = item[:ordinal_index] = @orderedItems.index(item)
    if i
      item[:next_item]     = @orderedItems[i + 1].identifier if @orderedItems[i + 1]
      item[:previous_item] = @orderedItems[i - 1].identifier if @orderedItems[i - 1]
    end
    item[:github_user] = @github_users[item[:github]]
  end

  @config[:chapters] = @chapters
end

compile '/assets/*' do
  # don't filter or layout
end

compile '/images/*' do
  # don't filter or layout
end

filters = {
  markdown: :kramdown,
  md: :kramdown,
  html: :erb
}

# Index files in each content directory
route '/*/dex' do
  item.identifier.to_s.sub('dex/', '') + 'index.html'
end

# Just the homepage
route '/dex' do
  item.identifier.to_s.sub('dex/', '') + 'index.html'
end

compile '*' do
  # filter :noslides
  filter :code_blocks
  filter :kramdown
  filter :pattern_tester
  filter filters[item[:extension].to_sym] || item[:extension].to_sym
  if item[:homepage]
    layout 'home'
  elsif item.identifier.to_s.match(%r{/dex/$})
    filter :slide_breaks
    layout 'dex'
  else
    filter :slide_breaks
    filter :responsive_images
    layout 'default'
  end
  filter :includes
end

route '*' do
  # p [item.identifier, item[:extension], item.binary?]
  if item.binary? || item[:extension] == 'css' || item[:extension] == 'js' || item[:extension] == 'png' || item[:extension] == 'html' || item[:extension] == 'xml'
    # /foo/ -> /foo.ext
    # p item.identifier.chop + '.' + item[:extension]
    item.identifier.to_s.chop + '.' + item[:extension]
  elsif item[:extension] == 'txt'
    item.identifier.to_s.chop + '.' + item[:extension]
  elsif item[:extension] == 'html'
    item.identifier.to_s.chop + '.' + item[:extension]
  else
    # /foo/ -> /foo/index.html
    item.identifier + 'index.html'
  end
end

compile '/assets/*', rep: :slide do
  # don't filter or layout
end

compile '/images/*', rep: :slide do
end

compile '*', rep: :slide do
  filter :pattern_tester
  filter :code_blocks
  filter :kramdown
  filter :responsive_images

  # filter filters[item[:extension].to_sym] || item[:extension].to_sym
  filter :slides
  if item[:homepage]
    # noop
    #  elsif item.identifier.match /\/dex\/$/
  else
    layout 'slide'
  end
  filter :includes
end

route '*', rep: :slide do
  if item.binary? || item[:extension] == 'css' || item[:extension] == 'js' || item[:extension] == 'png' || item[:extension] == 'xml' || item[:extension] == 'html'
    nil
  elsif item[:homepage]
    nil
  elsif item.identifier.to_s.match(%r{/dex/$})
    item.identifier.to_s.gsub(%r{dex/}, 'slide.html')
  else
    # /foo/ -> /foo/index.html
    item.identifier + 'slide.html'
  end
end

layout '*', :erb
